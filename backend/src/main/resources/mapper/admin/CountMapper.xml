<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.x.backend.mapper.admin.CountMapper">

      <!-- insertAllCount -->

      <insert id="insertAllCount">
      insert into all_count(count,date) values(#{count},#{date})
      </insert>

      <!-- insertSongCount -->

      <insert id="insertSongCount">
          insert into song_count(count,date) values(#{count},#{date})
      </insert>

      <!-- insertBookCount -->

      <insert id="insertBookCount">
          insert into book_count(count,date) values(#{count},#{date})
      </insert>

      <!-- insertMovieCount -->

      <insert id="insertMovieCount">
          insert into movie_count(count,date) values(#{count},#{date})
      </insert>

      <!-- getAllCounts -->

      <!-- insertOtherCount -->

      <insert id="insertOtherCount">
          insert into other_count(count,date) values(#{count},#{date})
      </insert>

      <!-- insertAiCount -->

      <insert id="insertAiCount">
          insert into ai_count(count,date) values(#{count},#{date})
      </insert>

      <!-- addInsertSongCount -->

      <insert id="addInsertSongCount">
        insert into song_insert_count(count,date) values(#{count},#{date})
      </insert>

      <!-- addUpdateSongCount -->

      <insert id="addUpdateSongCount">
        insert into song_update_count(count,date) values(#{count},#{date})
      </insert>

      <!-- addDeleteSongCount -->

      <insert id="addDeleteSongCount">
        insert into song_delete_count(count,date) values(#{count},#{date})
      </insert>

      <!-- getSongTypeCounts -->

      <select id="getSongTypeCounts">
     SELECT tag AS type, COUNT(*) AS count
     FROM song,
     JSON_TABLE(tags, '$[*]' COLUMNS(tag VARCHAR(255) PATH '$')) AS jt
     GROUP BY tag;
      </select>

      <!-- addInsertBookCount -->

      <insert id="addInsertBookCount">
      insert into book_insert_count(count,date) values(#{count},#{date})
      </insert>

      <!-- addUpdateBookCount -->

      <insert id="addUpdateBookCount">
      insert into book_update_count(count,date) values(#{count},#{date})
      </insert>


      <!-- addDeleteBookCount -->

      <insert id="addDeleteBookCount">
      insert into book_delete_count(count,date) values(#{count},#{date})
      </insert>

      <!-- getBookTypeCounts -->

      <select id="getBookTypeCounts">
       SELECT jt.type AS type, COUNT(*) AS count
       FROM book,
       JSON_TABLE(book.type, '$[*]' COLUMNS(type VARCHAR(255) PATH '$')) AS jt
       GROUP BY jt.type;
      </select>

      <!-- getGamesTypeCounts -->

      <select id="getGamesTypeCounts">
          SELECT jt.type AS type, COUNT(*) AS count
          FROM games,
          JSON_TABLE(games.game_categories, '$[*]' COLUMNS(type VARCHAR(255) PATH '$')) AS jt
          GROUP BY jt.type;
      </select>

      <!-- getAllCounts -->

      <select id="getAllCounts">
          WITH RECURSIVE DateRange AS (
          SELECT CAST(#{startTime} AS DATE) AS date
          UNION ALL
          SELECT DATE_ADD(date, INTERVAL 1 DAY) FROM DateRange WHERE date  &lt; CAST(#{endTime} AS DATE)
         )
         SELECT IFNULL(ac.count, 0) AS count
        FROM DateRange dr
        LEFT JOIN all_count ac ON dr.date = ac.date
        WHERE dr.date BETWEEN CAST(#{startTime} AS DATE) AND CAST(#{endTime} AS DATE)
        ORDER BY dr.date ASC;
      </select>

      <!-- getSongCounts -->

      <select id="getSongCounts">
                 WITH RECURSIVE DateRange AS (
          SELECT CAST(#{startTime} AS DATE) AS date
          UNION ALL
          SELECT DATE_ADD(date, INTERVAL 1 DAY) FROM DateRange WHERE date  &lt; CAST(#{endTime} AS DATE)
         )
         SELECT IFNULL(ac.count, 0) AS count
        FROM DateRange dr
        LEFT JOIN song_count ac ON dr.date = ac.date
        WHERE dr.date BETWEEN CAST(#{startTime} AS DATE) AND CAST(#{endTime} AS DATE)
        ORDER BY dr.date ASC;
      </select>

      <!-- getMovieCounts -->

      <select id="getMovieCounts">
               WITH RECURSIVE DateRange AS (
          SELECT CAST(#{startTime} AS DATE) AS date
          UNION ALL
          SELECT DATE_ADD(date, INTERVAL 1 DAY) FROM DateRange WHERE date  &lt; CAST(#{endTime} AS DATE)
         )
         SELECT IFNULL(ac.count, 0) AS count
        FROM DateRange dr
        LEFT JOIN movie_count ac ON dr.date = ac.date
        WHERE dr.date BETWEEN CAST(#{startTime} AS DATE) AND CAST(#{endTime} AS DATE)
        ORDER BY dr.date ASC;
      </select>

      <!-- getBookCounts -->

      <select id="getBookCounts">
         WITH RECURSIVE DateRange AS (
          SELECT CAST(#{startTime} AS DATE) AS date
          UNION ALL
          SELECT DATE_ADD(date, INTERVAL 1 DAY) FROM DateRange WHERE date  &lt; CAST(#{endTime} AS DATE)
         )
         SELECT IFNULL(ac.count, 0) AS count
        FROM DateRange dr
        LEFT JOIN book_count ac ON dr.date = ac.date
        WHERE dr.date BETWEEN CAST(#{startTime} AS DATE) AND CAST(#{endTime} AS DATE)
        ORDER BY dr.date ASC;
      </select>

      <!-- getGameCounts -->

      <select id="getGameCounts">
         WITH RECURSIVE DateRange AS (
          SELECT CAST(#{startTime} AS DATE) AS date
          UNION ALL
          SELECT DATE_ADD(date, INTERVAL 1 DAY) FROM DateRange WHERE date  &lt; CAST(#{endTime} AS DATE)
         )
         SELECT IFNULL(ac.count, 0) AS count
        FROM DateRange dr
        LEFT JOIN game_count ac ON dr.date = ac.date
        WHERE dr.date BETWEEN CAST(#{startTime} AS DATE) AND CAST(#{endTime} AS DATE)
        ORDER BY dr.date ASC;
      </select>

      <!-- getOtherCounts -->

      <select id="getOtherCounts">
        WITH RECURSIVE DateRange AS (
          SELECT CAST(#{startTime} AS DATE) AS date
          UNION ALL
          SELECT DATE_ADD(date, INTERVAL 1 DAY) FROM DateRange WHERE date  &lt; CAST(#{endTime} AS DATE)
         )
         SELECT IFNULL(ac.count, 0) AS count
        FROM DateRange dr
        LEFT JOIN outher_count ac ON dr.date = ac.date
        WHERE dr.date BETWEEN CAST(#{startTime} AS DATE) AND CAST(#{endTime} AS DATE)
        ORDER BY dr.date ASC;
      </select>

      <!-- getAiCounts -->

      <select id="getAiCounts">
        WITH RECURSIVE DateRange AS (
          SELECT CAST(#{startTime} AS DATE) AS date
          UNION ALL
          SELECT DATE_ADD(date, INTERVAL 1 DAY) FROM DateRange WHERE date  &lt; CAST(#{endTime} AS DATE)
         )
         SELECT IFNULL(ac.count, 0) AS count
        FROM DateRange dr
        LEFT JOIN ai_count ac ON dr.date = ac.date
        WHERE dr.date BETWEEN CAST(#{startTime} AS DATE) AND CAST(#{endTime} AS DATE)
        ORDER BY dr.date ASC;
      </select>

      <!-- getSongInsertCounts -->

      <select id="getSongInsertCounts">
          WITH RECURSIVE DateRange AS (
          SELECT CAST(#{startTime} AS DATE) AS date
          UNION ALL
          SELECT DATE_ADD(date, INTERVAL 1 DAY) FROM DateRange WHERE date  &lt; CAST(#{endTime} AS DATE)
         )
         SELECT IFNULL(ac.count, 0) AS count
        FROM DateRange dr
        LEFT JOIN song_insert_count ac ON dr.date = ac.date
        WHERE dr.date BETWEEN CAST(#{startTime} AS DATE) AND CAST(#{endTime} AS DATE)
        ORDER BY dr.date ASC;
      </select>

      <!-- getSongUpdateCounts -->

      <select id="getSongUpdateCounts">
        WITH RECURSIVE DateRange AS (
          SELECT CAST(#{startTime} AS DATE) AS date
          UNION ALL
          SELECT DATE_ADD(date, INTERVAL 1 DAY) FROM DateRange WHERE date  &lt; CAST(#{endTime} AS DATE)
         )
         SELECT IFNULL(ac.count, 0) AS count
        FROM DateRange dr
        LEFT JOIN song_update_count ac ON dr.date = ac.date
        WHERE dr.date BETWEEN CAST(#{startTime} AS DATE) AND CAST(#{endTime} AS DATE)
        ORDER BY dr.date ASC;
      </select>

      <!-- getSongDeleteCounts -->

      <select id="getSongDeleteCounts">
        WITH RECURSIVE DateRange AS (
          SELECT CAST(#{startTime} AS DATE) AS date
          UNION ALL
          SELECT DATE_ADD(date, INTERVAL 1 DAY) FROM DateRange WHERE date  &lt; CAST(#{endTime} AS DATE)
         )
         SELECT IFNULL(ac.count, 0) AS count
        FROM DateRange dr
        LEFT JOIN song_delete_count ac ON dr.date = ac.date
        WHERE dr.date BETWEEN CAST(#{startTime} AS DATE) AND CAST(#{endTime} AS DATE)
        ORDER BY dr.date ASC;
      </select>

      <!-- getBookInsertCounts -->

      <select id="getBookInsertCounts">
         WITH RECURSIVE DateRange AS (
          SELECT CAST(#{startTime} AS DATE) AS date
          UNION ALL
          SELECT DATE_ADD(date, INTERVAL 1 DAY) FROM DateRange WHERE date  &lt; CAST(#{endTime} AS DATE)
         )
         SELECT IFNULL(ac.count, 0) AS count
        FROM DateRange dr
        LEFT JOIN book_insert_count ac ON dr.date = ac.date
        WHERE dr.date BETWEEN CAST(#{startTime} AS DATE) AND CAST(#{endTime} AS DATE)
        ORDER BY dr.date ASC;
      </select>

      <!-- getBookUpdateCounts -->

      <select id="getBookUpdateCounts">
 WITH RECURSIVE DateRange AS (
          SELECT CAST(#{startTime} AS DATE) AS date
          UNION ALL
          SELECT DATE_ADD(date, INTERVAL 1 DAY) FROM DateRange WHERE date  &lt; CAST(#{endTime} AS DATE)
         )
         SELECT IFNULL(ac.count, 0) AS count
        FROM DateRange dr
        LEFT JOIN book_update_count ac ON dr.date = ac.date
        WHERE dr.date BETWEEN CAST(#{startTime} AS DATE) AND CAST(#{endTime} AS DATE)
        ORDER BY dr.date ASC;
      </select>

      <!-- getBookDeleteCounts -->

      <select id="getBookDeleteCounts">
         WITH RECURSIVE DateRange AS (
          SELECT CAST(#{startTime} AS DATE) AS date
          UNION ALL
          SELECT DATE_ADD(date, INTERVAL 1 DAY) FROM DateRange WHERE date  &lt; CAST(#{endTime} AS DATE)
         )
         SELECT IFNULL(ac.count, 0) AS count
        FROM DateRange dr
        LEFT JOIN book_delete_count ac ON dr.date = ac.date
        WHERE dr.date BETWEEN CAST(#{startTime} AS DATE) AND CAST(#{endTime} AS DATE)
        ORDER BY dr.date ASC;
      </select>

      <!-- insertGameCount -->

      <insert id="insertGameCount">
        insert into game_count(count,date) values(#{count},#{date})
      </insert>

      <!-- getAllCountSong -->

      <select id="getAllCountSong">
              SELECT sum(count) AS count
              FROM song_count;
      </select>

      <!-- getAllCountMovie -->

      <select id="getAllCountMovie">
              SELECT sum(count) AS count
              FROM movie_count;
      </select>

      <!-- getAllCountAi -->

      <select id="getAllCountAi">
              SELECT sum(count) AS count
              FROM ai_count;
      </select>

      <!-- getAllCountBook -->

      <select id="getAllCountBook">
              SELECT sum(count) AS count
              FROM book_count;
      </select>

      <!-- getAllCountGame -->

      <select id="getAllCountGame">
              SELECT sum(count) AS count
              FROM game_count;
      </select>

      <!-- getAllCountOther -->

      <select id="getAllCountOther">
              SELECT sum(count) AS count
              FROM other_count;
      </select>


      <!-- getAllCountAll -->

      <select id="getAllCountAll">
              SELECT sum(count)AS count
              FROM all_count;
      </select>
</mapper>